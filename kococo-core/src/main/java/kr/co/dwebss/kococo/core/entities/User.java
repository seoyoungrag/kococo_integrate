package kr.co.dwebss.kococo.core.entities;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;

import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;
import org.springframework.hateoas.ResourceSupport;

/**
 * User generated by hbm2java
 */
@Entity
@EntityListeners(AuditingEntityListener.class)
@Table(name = "user", catalog = "kococo")
public class User extends ResourceSupport implements java.io.Serializable {

	private String userAppId;
	private Integer userAge;
	private Character userGender;
	private Integer userWeight;
	private Integer userHeight;
	private Integer userTicketCnt=0;
	@CreatedDate
	private LocalDateTime userRegistDt;
	private Integer deviceFileStoreDayTerm=90;
	private List<Record> records = new ArrayList<Record>(0);
	private List<Payment> payments = new ArrayList<Payment>(0);

	public User() {
	}

	public User(String userAppId) {
		this.userAppId = userAppId;
	}

	public User(String userAppId, Integer userAge, Character userGender, Integer userWeight, Integer userHeight,
			Integer userTicketCnt, LocalDateTime userRegistDt, Integer deviceFileStoreDayTerm, List<Record> records,
			List<Payment> payments) {
		this.userAppId = userAppId;
		this.userAge = userAge;
		this.userGender = userGender;
		this.userWeight = userWeight;
		this.userHeight = userHeight;
		this.userTicketCnt = userTicketCnt;
		this.userRegistDt = userRegistDt;
		this.deviceFileStoreDayTerm = deviceFileStoreDayTerm;
		this.records = records;
		this.payments = payments;
	}

	@Id

	@Column(name = "USER_APP_ID", unique = true, nullable = false, length = 36)
	public String getUserAppId() {
		return this.userAppId;
	}

	public void setUserAppId(String userAppId) {
		this.userAppId = userAppId;
	}

	@Column(name = "USER_AGE")
	public Integer getUserAge() {
		return this.userAge;
	}

	public void setUserAge(Integer userAge) {
		this.userAge = userAge;
	}

	@Column(name = "USER_GENDER", length = 1)
	public Character getUserGender() {
		return this.userGender;
	}

	public void setUserGender(Character userGender) {
		this.userGender = userGender;
	}

	@Column(name = "USER_WEIGHT")
	public Integer getUserWeight() {
		return this.userWeight;
	}

	public void setUserWeight(Integer userWeight) {
		this.userWeight = userWeight;
	}

	@Column(name = "USER_HEIGHT")
	public Integer getUserHeight() {
		return this.userHeight;
	}

	public void setUserHeight(Integer userHeight) {
		this.userHeight = userHeight;
	}

	@Column(name = "USER_TICKET_CNT")
	public Integer getUserTicketCnt() {
		return this.userTicketCnt;
	}

	public void setUserTicketCnt(Integer userTicketCnt) {
		this.userTicketCnt = userTicketCnt;
	}

	@Column(name = "USER_REGIST_DT", length = 19)
	public LocalDateTime getUserRegistDt() {
		return this.userRegistDt;
	}

	public void setUserRegistDt(LocalDateTime userRegistDt) {
		this.userRegistDt = userRegistDt;
	}

	@Column(name = "DEVICE_FILE_STORE_DAY_TERM", length = 3)
	public Integer getDeviceFileStoreDayTerm() {
		return deviceFileStoreDayTerm;
	}

	public void setDeviceFileStoreDayTerm(Integer deviceFileStoreDayTerm) {
		this.deviceFileStoreDayTerm = deviceFileStoreDayTerm;
	}
	
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true, mappedBy = "user")
	@OrderBy(value = "recordStartDt ASC")
	public List<Record> getRecords() {
		return this.records;
	}

	public void setRecords(List<Record> records) {
		
        if (this.records != null) {
            this.records.forEach(record -> record.setUser(null));
        }
        if (records != null) {
        	records.forEach(record -> record.setUser(this));
        }
        
		this.records = records;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true, mappedBy = "user")
	@OrderBy(value = "paymentDt ASC")
	public List<Payment> getPayments() {
		return this.payments;
	}

	public void setPayments(List<Payment> payments) {
		
        if (this.payments != null) {
            this.payments.forEach(payment -> payment.setUser(null));
        }
        if (payments != null) {
        	payments.forEach(payment -> payment.setUser(this));
        }
        
		this.payments = payments;
	}

}
